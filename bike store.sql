Select
      ord.order_id,
	  CONCAT(cus.first_name, ' ', cus.Last_name) AS 'customers',
	  cus.city,
	  cus.state,
	  ord.Order_date,
	  SUM(ite.quantity) AS 'total_units',
	  SUM(ite.quantity * ite.list_price) AS 'revenue',
	  product_name,
	  cat.category_name,
	  sto.store_name,
	  CONCAT(sta.first_name, ' ', sta.last_name) AS 'sales_rep'
FROM sales.orders ord
JOIN sales.customers cus 
ON ord.customer_id = cus.customer_id
JOIN sales.order_items ite
ON ord.order_id = ite.order_id
JOIN production.products pro
ON ite.product_id = pro.product_id
JOIN production.categories cat 
ON pro.category_id = cat.category_id
JOIN sales.stores sto
ON ord.store_id = sto.store_id
JOIN sales.staffs sta
ON ord.staff_id = sta.staff_id
GROUP BY 
      ord.order_id,
	  CONCAT(cus.first_name, ' ', cus.Last_name),
	  cus.city,
	  cus.state,
	  ord.Order_date,
	  pro.product_name,
	  cat.category_name,
	  sto.store_name,
	  CONCAT(sta.first_name, ' ', sta.last_name)


--This SQL code retrieves and summarizes sales data from multiple tables in a database. Here's a breakdown of what each part does:

1. Selecting Data:

SELECT: This keyword specifies the columns we want to retrieve from the database.
Columns selected:
ord.order_id: Unique identifier for each order.
CONCAT(cus.first_name, ' ', cus.Last_name): Creates a new column named "customers" by combining customer first and last names with a space in between.
cus.city: City of the customer.
cus.state: State of the customer.
ord.Order_date: Date of the order.
SUM(ite.quantity): Calculates the total number of units sold by summing the quantity of each item in an order. This is aliased as "total_units".
SUM(ite.quantity * ite.list_price): Calculates the total revenue generated by summing the product of quantity and list price for each item in an order. This is aliased as "revenue".
product_name: Name of the product sold.
cat.category_name: Category of the product.
sto.store_name: Name of the store where the order was placed.
CONCAT(sta.first_name, ' ', sta.last_name): Creates a new column named "sales_rep" by combining staff first and last names with a space in between.
2. Joining Tables:

FROM sales.orders ord: Specifies the table named "orders" within the schema "sales" as the starting point.
JOIN sales.customers cus ON ord.customer_id = cus.customer_id: Joins the "customers" table with the "orders" table based on the matching customer ID in both tables.
Similar JOIN statements connect the "order_items", "products", "categories", "stores", and "staffs" tables to the "orders" table using relevant foreign key relationships.
3. Grouping Data:

GROUP BY: This clause groups the retrieved data by the following columns:
ord.order_id: To ensure information is aggregated for each unique order.
Columns used to create "customers", "total_units", "revenue", "product_name", "category_name", "store_name", and "sales_rep". This ensures calculations and summaries are done at the appropriate level (e.g., total units and revenue per order).
